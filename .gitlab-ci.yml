image: node:14-alpine3.13

workflow:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^chore\((release|sync)\).*/ || $CI_COMMIT_TAG
      when: never
    - when: always

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .pnpm-store

before_script:
  - apk update
  - apk add zip curl git openssh-client findutils
  - curl -L https://unpkg.com/@pnpm/self-installer | node
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - pnpm config set store-dir .pnpm-store
  - pnpm set verify-store-integrity false
  - pnpm install

stages:
  - sync
  - test
  - build
  - release

sync:
  stage: sync
  script:
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_KEY" | tr -d '\r' | ssh-add -
    - xargs -L 1 -a .packs curl --create-dirs -OSs --output-dir packs
    - pnpx fvttp --path packs --babele true --save packs
    - mv packs/*.json lang/en
    - git add lang
    - "git commit -m 'chore(sync): update files' || echo 'No changes, nothing to commit!'"
    - git remote rm origin && git remote add origin git@gitlab.com:$CI_PROJECT_PATH.git
    - git push origin HEAD:$CI_COMMIT_REF_NAME
  rules:
      - if: $CI_PIPELINE_SOURCE == 'schedule'

jsonlint:
  stage: test
  script:
    - pnpx jsonlint -q --enforce-double-quotes dnd5e_pt-BR lang

semistandard:
  stage: test
  script:
    - pnpx semistandard

build:
  stage: build
  script:
    - export NEXT_VERSION=$(pnpx semantic-release --dry-run | grep -Pio '(?<=The next release version is )(.*)(?=$)')
    - export NEXT_DOWNLOAD=$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$CI_PROJECT_NAME/$NEXT_VERSION/dnd5e_pt-BR.zip
    - pnpx json -I -f dnd5e_pt-BR/module.json -e 'this.version="'$NEXT_VERSION'"' -e 'this.download="'$NEXT_DOWNLOAD'"'
    - pnpx json -I -f package.json -e 'this.version="'$NEXT_VERSION'"'
    - zip -r -9 dnd5e_pt-BR.zip dnd5e_pt-BR
  artifacts:
    name: dnd5e_pt-BR
    when: on_success
    paths:
      - package.json
      - dnd5e_pt-BR.zip
      - dnd5e_pt-BR/module.json
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(master|beta)/ && $CI_PIPELINE_SOURCE != 'schedule'

publish:
  stage: release
  script:
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_KEY" | tr -d '\r' | ssh-add -
    - pnpx semantic-release
  rules:
      - if: $CI_COMMIT_BRANCH =~ /^(master|beta)/ && $CI_PIPELINE_SOURCE != 'schedule'
